name: Release

on:
  push:
    tags: ["v*"]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        resolver: [lts-23.27]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Haskell Stack
        uses: haskell-actions/setup@v2
        with:
          ghc-version: "latest"
          enable-stack: true
          stack-version: "latest"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-${{ matrix.resolver }}-${{ hashFiles('**/*.cabal', 'stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-${{ matrix.resolver }}-
            ${{ runner.os }}-stack-

      - name: Install dependencies
        run: stack build --resolver ${{ matrix.resolver }} --dependencies-only

      - name: Build project
        run: stack build --resolver ${{ matrix.resolver }}

      - name: Run tests
        run: stack test --resolver ${{ matrix.resolver }}

  release:
    name: Build Release
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: mkmetrics-linux-x86_64
            strip_cmd: strip
          - os: windows-latest
            asset_name: mkmetrics-windows-x86_64.exe
            strip_cmd: echo "No strip on Windows"
          - os: macOS-latest
            asset_name: mkmetrics-darwin-x86_64
            strip_cmd: strip

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Haskell Stack
        uses: haskell-actions/setup@v2
        with:
          ghc-version: "latest"
          enable-stack: true
          stack-version: "latest"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-release-${{ hashFiles('**/*.cabal', 'stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-release-
            ${{ runner.os }}-stack-

      - name: Build static binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
          stack build --resolver lts-23.27 --flag mkmetrics:static --ghc-options='-optl-static -optl-pthread' --copy-bins --local-bin-path ./dist

      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          stack build --resolver lts-23.27 --copy-bins --local-bin-path ./dist

      - name: Build static binary (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          stack build --resolver lts-23.27 --ghc-options='-optl-static' --copy-bins --local-bin-path ./dist

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          ${{ matrix.strip_cmd }} ./dist/mkmetrics-exe

      - name: Prepare release asset
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp ./dist/mkmetrics-exe.exe ./${{ matrix.asset_name }}
          else
            cp ./dist/mkmetrics-exe ./${{ matrix.asset_name }}
          fi

      - name: Upload release asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  create-release:
    name: Create Release
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./assets/*/**
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

