name: Release

on:
  push:
    tags: ["v*"]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        resolver: [lts-23.27]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Haskell Stack
        uses: haskell-actions/setup@v2
        with:
          ghc-version: "latest"
          enable-stack: true
          stack-version: "latest"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-${{ matrix.resolver }}-${{ hashFiles('**/*.cabal', 'stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-${{ matrix.resolver }}-
            ${{ runner.os }}-stack-

      - name: Install dependencies
        run: stack build --resolver ${{ matrix.resolver }} --dependencies-only

      - name: Build project
        run: stack build --resolver ${{ matrix.resolver }}

      - name: Run tests
        run: stack test --resolver ${{ matrix.resolver }}

  release:
    name: Build Release
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: mkmetrics-linux-x86_64
            strip_cmd: strip
            container: alpine:3.18
          - os: windows-latest
            asset_name: mkmetrics-windows-x86_64.exe
            strip_cmd: echo "No strip on Windows"
          - os: macOS-latest
            asset_name: mkmetrics-darwin-x86_64
            strip_cmd: strip

    container: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (Alpine)
        if: matrix.container == 'alpine:3.18'
        run: |
          apk add --no-cache \
            curl gcc g++ gmp-dev ncurses-dev libffi-dev make xz gzip tar perl git bash sudo \
            zlib zlib-dev zlib-static gmp gmp-dev ncurses-static musl-dev binutils-gold \
            autoconf automake libtool pkgconfig

          # Fix ownership issues for GitHub Actions
          chown -R $(whoami) /github/home || true
          mkdir -p /github/home/.stack
          chown -R $(whoami) /github/home/.stack || true

          # Fix ownership of the workspace directory (after checkout)
          chown -R $(whoami) /__w/mkmetrics/mkmetrics || true

      - name: Install GHCup (Alpine)
        if: matrix.container == 'alpine:3.18'
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup > /usr/bin/ghcup
          chmod +x /usr/bin/ghcup
          export PATH="$HOME/.ghcup/bin:$PATH"
          echo "$HOME/.ghcup/bin" >> $GITHUB_PATH

      - name: Install GHC and Stack (Alpine)
        if: matrix.container == 'alpine:3.18'
        run: |
          export PATH="$HOME/.ghcup/bin:$PATH"

          # Ensure proper ownership for ghcup directory
          mkdir -p "$HOME/.ghcup"
          chown -R $(whoami) "$HOME/.ghcup" || true

          ghcup install ghc --set 9.8.4
          ghcup install stack --set latest

          # Verify installations
          ghc --version
          stack --version

      - name: Setup Haskell Stack (Non-Alpine)
        if: matrix.container != 'alpine:3.18'
        uses: haskell-actions/setup@v2
        with:
          ghc-version: "latest"
          enable-stack: true
          stack-version: "latest"

      - name: Cache dependencies (Alpine)
        if: matrix.container == 'alpine:3.18'
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: alpine-stack-release-${{ hashFiles('**/*.cabal', 'stack.yaml', 'package.yaml') }}
          restore-keys: |
            alpine-stack-release-
            alpine-stack-

      - name: Cache dependencies (Non-Alpine)
        if: matrix.container != 'alpine:3.18'
        uses: actions/cache@v4
        with:
          path: |
            ~/.stack
            .stack-work
          key: ${{ runner.os }}-stack-release-${{ hashFiles('**/*.cabal', 'stack.yaml', 'package.yaml') }}
          restore-keys: |
            ${{ runner.os }}-stack-release-
            ${{ runner.os }}-stack-

      - name: Build static binary (Alpine Linux)
        if: matrix.container == 'alpine:3.18'
        run: |
          export PATH="$HOME/.ghcup/bin:$PATH"

          # Set stack root explicitly to avoid permission issues
          export STACK_ROOT="$HOME/.stack"

          mkdir -p ./dist

          # Build with static linking options - add --allow-different-user flag
          stack build --resolver lts-23.27 --flag mkmetrics:static \
            --ghc-options='-split-sections -optl-static -optl-pthread' \
            --copy-bins --local-bin-path ./dist --allow-different-user

      - name: Build binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          stack build --resolver lts-23.27 --copy-bins --local-bin-path ./dist

      - name: Build binary (macOS)
        if: matrix.os == 'macOS-latest'
        run: |
          stack build --resolver lts-23.27 --copy-bins --local-bin-path ./dist

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          # Find the executable file (could be mkmetrics-exe or mkmetrics)
          if [ -f ./dist/mkmetrics-exe ]; then
            BINARY_PATH="./dist/mkmetrics-exe"
          elif [ -f ./dist/mkmetrics ]; then
            BINARY_PATH="./dist/mkmetrics"
          else
            echo "Binary not found in ./dist/"
            ls -la ./dist/
            exit 1
          fi
          ${{ matrix.strip_cmd }} "$BINARY_PATH"

      - name: Prepare release asset
        shell: bash
        run: |
          # Find the executable file
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if [ -f ./dist/mkmetrics-exe.exe ]; then
              cp ./dist/mkmetrics-exe.exe ./${{ matrix.asset_name }}
            elif [ -f ./dist/mkmetrics.exe ]; then
              cp ./dist/mkmetrics.exe ./${{ matrix.asset_name }}
            else
              echo "Windows binary not found"
              ls -la ./dist/
              exit 1
            fi
          else
            if [ -f ./dist/mkmetrics-exe ]; then
              cp ./dist/mkmetrics-exe ./${{ matrix.asset_name }}
            elif [ -f ./dist/mkmetrics ]; then
              cp ./dist/mkmetrics ./${{ matrix.asset_name }}
            else
              echo "Unix binary not found"
              ls -la ./dist/
              exit 1
            fi
          fi

      - name: Upload release asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  create-release:
    name: Create Release
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract changelog for version
        id: changelog
        shell: bash
        run: |
          # Get the version from the git tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Version: $VERSION"

          # Extract the changelog section for this version
          awk -v version="v$VERSION" '
          BEGIN { found=0; content="" }
          /^## / {
            if (found == 1) exit
            if ($0 ~ version) {
              found=1
              next
            }
          }
          found == 1 && /^### / { content = content $0 "\n"; next }
          found == 1 && /^- / { content = content $0 "\n"; next }
          found == 1 && /^[[:space:]]*$/ { content = content "\n"; next }
          found == 1 && !/^## / { content = content $0 "\n" }
          ' CHANGELOG.md > release_notes.txt

          # If no specific changelog found, create a generic one
          if [ ! -s release_notes.txt ]; then
            echo "## Changes in v$VERSION" > release_notes.txt
            echo "" >> release_notes.txt
            echo "See [CHANGELOG.md](./CHANGELOG.md) for details." >> release_notes.txt
          fi

          # Set the changelog content as output (escape for multiline)
          {
            echo 'CHANGELOG<<EOF'
            cat release_notes.txt
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./assets/*/**
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

